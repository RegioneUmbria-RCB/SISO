package it.webred.rulengine.brick.loadDwh.load;

import it.webred.rulengine.Command;
import it.webred.rulengine.Context;
import it.webred.rulengine.Rule;
import it.webred.rulengine.brick.bean.ApplicationAck;
import it.webred.rulengine.brick.bean.CommandAck;
import it.webred.rulengine.brick.bean.ErrorAck;
import it.webred.rulengine.brick.bean.NotFoundAck;
import it.webred.rulengine.brick.loadDwh.load.demografia.anagrafeExt.DemogAnagrafeExtEnv;
import it.webred.rulengine.brick.loadDwh.load.demografia.anagrafeExt.DemogAnagrafeExtFiles;
import it.webred.rulengine.db.model.RAbNormal;
import it.webred.rulengine.exception.CommandException;
import it.webred.rulengine.impl.bean.BeanCommand;
import it.webred.utils.GenericTuples.T2;

import java.io.File;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import org.apache.commons.dbutils.DbUtils;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.util.CellRangeAddress;

public class ImportDemogAnagrafeExtRule extends Command implements Rule {
	
	private static Logger log = Logger.getLogger(ImportDemogAnagrafeExtRule.class.getName());
	
	public ImportDemogAnagrafeExtRule(BeanCommand bc, Properties jrulecfg) {
		super(bc, jrulecfg);
		System.setProperty("oracle.jdbc.V8Compatible", "true");
	}

	

	@Override
	public CommandAck run(Context ctx) throws CommandException {
		CommandAck retAck = null;
		
		try {
			DemogAnagrafeExtEnv env = new DemogAnagrafeExtEnv((String)ctx.get("connessione"), ctx);
			DemogAnagrafeExtFiles<DemogAnagrafeExtEnv> danag = new DemogAnagrafeExtFiles<DemogAnagrafeExtEnv>(env);
			T2<String, List<RAbNormal>> msg = danag.avviaImportazioneFiles();
			
			//retAck = new ApplicationAck(msg.firstObj);
			
			//se nn ci sono file da elaborare NotFoundAck
			if(msg.firstObj.equals(danag.RETURN_NO_FILE)) {
				retAck = new NotFoundAck(msg.firstObj);
			}
			else {
				retAck = new ApplicationAck(msg.firstObj);
				try {
					ctrlViario(env);
				} catch (Exception e) {
					//l'eccezione nel controllo del viario non Ã¨ bloccante
					log.error(e);
				}
			}
			
		}catch (Exception e) {
			log.error("Errore grave importando i dati", e);
			retAck =  new ErrorAck(e);
		}
		
		return retAck;
	}
	
	protected void ctrlViario(DemogAnagrafeExtEnv env) throws Exception {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		
        try {
	        conn = env.getConn();
	        
	        String percorsoFiles = env.getPercorsoFiles();
	        String cartellaDati = percorsoFiles.substring(0, percorsoFiles.lastIndexOf("/") + 1);
            if (cartellaDati == null) {
            	cartellaDati = percorsoFiles.substring(0, percorsoFiles.lastIndexOf("\\") + 1);
            }
            String percorsoFileLog = cartellaDati + "LOG_CTRL_VIARIO/";
            File f = new File(percorsoFileLog);
            if (!f.exists()) {
            	f.mkdir();
            }
            
	        String nomeFileLog = env.getCtx().getProcessID().replace("::", "_").replace(":", "_").replace("@", "_") + ".xls";
	        HSSFWorkbook wb = new HSSFWorkbook();        
	        boolean trovato = false;
	        
	        for (int i = 1; i <= 4; i++) {
	        	String nomeFoglio = env.getProperty("ctrlViario.nome." + i);
	        	String intestazione = env.getProperty("ctrlViario.intestazione." + i);
	        	String sql = env.getProperty("ctrlViario.sql." + i);
	        	HSSFSheet sheet = wb.getSheet(nomeFoglio);
	        	stmt = conn.createStatement();
	        	rs = stmt.executeQuery(sql);
	        	boolean scriviIntest = true;
	        	int riga = 0;
	        	while (rs.next()) {
	        		riga++; //base 1
	        		trovato = true;
	        		int totNumCol = rs.getMetaData().getColumnCount();
	        		if (scriviIntest) {
	        			//INTESTAZIONE FOGLIO	        			
	        			HSSFRow row = sheet.getRow(riga);
	        			if (row == null) {
	        				row = sheet.createRow(riga);
	        			}
	        			CellRangeAddress region = new CellRangeAddress(riga, riga, 0, totNumCol - 1);
	        			sheet.addMergedRegion(region);
	        			HSSFCell cell = row.getCell(0);
	        			if (cell == null) {
	        				cell = row.createCell(0);
	        			}
	        			cell.setCellType(HSSFCell.CELL_TYPE_STRING);
	        			HSSFCellStyle styleIntest = wb.createCellStyle();
	        			HSSFFont fontIntest = wb.createFont();
	        			fontIntest.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
	        			fontIntest.setFontName(HSSFFont.FONT_ARIAL);
	        			fontIntest.setFontHeight((short)12);
	        			styleIntest.setFont(fontIntest);
	        			cell.setCellStyle(styleIntest);
	        			cell.setCellValue(new HSSFRichTextString(intestazione));	        			
	        			riga++;
	        			
	        			//INTESTAZIONI CAMPI
	        			row = sheet.getRow(riga);
	        			if (row == null) {
	        				row = sheet.createRow(riga);
	        			}
	        			for (int j = 0; j < totNumCol; j++) {
	        				String intestCampo = rs.getMetaData().getColumnName(j).toUpperCase();
	        				cell = row.getCell(j);
		        			if (cell == null) {
		        				cell = row.createCell(j);
		        			}
		        			cell.setCellType(HSSFCell.CELL_TYPE_STRING);
		        			HSSFCellStyle style = wb.createCellStyle();
		        			HSSFFont font = wb.createFont();
		        			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		        			font.setFontName(HSSFFont.FONT_ARIAL);
		        			font.setFontHeight((short)11);
		        			style.setFont(font);
		        			style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		        			style.setFillBackgroundColor(HSSFColor.GREY_40_PERCENT.index);
		        			cell.setCellStyle(style);
		        			cell.setCellValue(new HSSFRichTextString(intestCampo));
	        			}
	        			
	        			riga++;
	        			
	        			scriviIntest = false;
	        		}

	        		//RECORD
	        		HSSFRow row = sheet.getRow(riga);
        			if (row == null) {
        				row = sheet.createRow(riga);
        			}
	        		for (int j = 0; j < totNumCol; j++) {
        				Object valore = rs.getObject(j);
        				HSSFCell cell = row.getCell(j);
	        			if (cell == null) {
	        				cell = row.createCell(j);
	        			}
	        			HSSFCellStyle style = wb.createCellStyle();
	        			HSSFFont font = wb.createFont();
	        			font.setFontName(HSSFFont.FONT_ARIAL);
	        			font.setFontHeight((short)10);
	        			style.setFont(font);	        			
	        			if (valore instanceof Integer) {
	        				cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
	        				cell.setCellValue(new Double(((Integer)valore).intValue()));
	        			} else if (valore instanceof Double) {
	        				cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
	        				cell.setCellValue((Double)valore);
	        			} else if (valore instanceof BigDecimal) {
	        				cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
	        				cell.setCellValue(new Double(((BigDecimal)valore).doubleValue()));
	        			} else if (valore instanceof Date) {
	        				short df = wb.createDataFormat().getFormat("dd/MM/yyyy");
	        				style.setDataFormat(df);
	        				cell.setCellValue((Date)valore);
	        			} else {
	        				cell.setCellType(HSSFCell.CELL_TYPE_STRING);
		        			cell.setCellValue(new HSSFRichTextString(valore == null ? "" : valore.toString()));
	        			}
	        			cell.setCellStyle(style);
        			}
	        		
	        	}
	        	
	        	HSSFRow row = sheet.getRow(1); //riga con intestazioni campi
	        	for (int colNum = 0; colNum < row.getLastCellNum(); colNum++) {
	        		sheet.autoSizeColumn(colNum);
	        	}
	        	
	        	DbUtils.close(rs);
	        	DbUtils.close(stmt);
	        }
	        
	        FileOutputStream fileOut = new FileOutputStream(percorsoFileLog + "\\" + nomeFileLog);
			wb.write(fileOut);
			fileOut.close();
			
			if (trovato) {
				//TODO INVIO E-MAIL CON XLS ALLEGATO?
			}
			
        } catch (Exception e1) {
            try {
            	DbUtils.close(conn);
            } catch (SQLException e2) {
            	log.error(e2);
            }
            throw e1;
        } finally {
	        try {
	        	DbUtils.close(rs);
	        	DbUtils.close(stmt);
	        } catch (SQLException e) {
	        	log.error(e);
	        }
        }
	}
	

}

